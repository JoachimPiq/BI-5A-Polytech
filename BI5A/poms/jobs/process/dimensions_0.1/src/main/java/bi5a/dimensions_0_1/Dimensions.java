// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bi5a.dimensions_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Dimensions Purpose: <br>
 * Description: Cr√©ation des dimensions District, Weapon, Victim, Crime,
 * Mode_Operatoire, Day, Time, Area?, Status? <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status
 */
public class Dimensions implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Dimensions";
	private final String projectName = "BI5A";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Dimensions.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Dimensions.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_clean_mocodes_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Vict_id;

		public String getVict_id() {
			return this.Vict_id;
		}

		public String Vict_Age;

		public String getVict_Age() {
			return this.Vict_Age;
		}

		public String Vict_Sex;

		public String getVict_Sex() {
			return this.Vict_Sex;
		}

		public String Vict_Descent;

		public String getVict_Descent() {
			return this.Vict_Descent;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Vict_id == null) ? 0 : this.Vict_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.Vict_id == null) {
				if (other.Vict_id != null)
					return false;

			} else if (!this.Vict_id.equals(other.Vict_id))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.Vict_id = this.Vict_id;
			other.Vict_Age = this.Vict_Age;
			other.Vict_Sex = this.Vict_Sex;
			other.Vict_Descent = this.Vict_Descent;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.Vict_id = this.Vict_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.Vict_id = readString(dis);

					this.Vict_Age = readString(dis);

					this.Vict_Sex = readString(dis);

					this.Vict_Descent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Vict_id, dos);

				// String

				writeString(this.Vict_Age, dos);

				// String

				writeString(this.Vict_Sex, dos);

				// String

				writeString(this.Vict_Descent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Vict_id=" + Vict_id);
			sb.append(",Vict_Age=" + Vict_Age);
			sb.append(",Vict_Sex=" + Vict_Sex);
			sb.append(",Vict_Descent=" + Vict_Descent);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Vict_id, other.Vict_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Time;

		public Integer getTime() {
			return this.Time;
		}

		public Integer Hours;

		public Integer getHours() {
			return this.Hours;
		}

		public Integer Minutes;

		public Integer getMinutes() {
			return this.Minutes;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Time == null) ? 0 : this.Time.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.Time == null) {
				if (other.Time != null)
					return false;

			} else if (!this.Time.equals(other.Time))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.Time = this.Time;
			other.Hours = this.Hours;
			other.Minutes = this.Minutes;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.Time = this.Time;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.Time = readInteger(dis);

					this.Hours = readInteger(dis);

					this.Minutes = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Time, dos);

				// Integer

				writeInteger(this.Hours, dos);

				// Integer

				writeInteger(this.Minutes, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Time=" + String.valueOf(Time));
			sb.append(",Hours=" + String.valueOf(Hours));
			sb.append(",Minutes=" + String.valueOf(Minutes));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Time, other.Time);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];

		public java.util.Date DATE_OCC;

		public java.util.Date getDATE_OCC() {
			return this.DATE_OCC;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.DATE_OCC = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.DATE_OCC, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DATE_OCC=" + String.valueOf(DATE_OCC));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Mocodes;

		public String getMocodes() {
			return this.Mocodes;
		}

		public String MoExplaination;

		public String getMoExplaination() {
			return this.MoExplaination;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Mocodes == null) ? 0 : this.Mocodes.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.Mocodes == null) {
				if (other.Mocodes != null)
					return false;

			} else if (!this.Mocodes.equals(other.Mocodes))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.Mocodes = this.Mocodes;
			other.MoExplaination = this.MoExplaination;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.Mocodes = this.Mocodes;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.Mocodes = readString(dis);

					this.MoExplaination = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Mocodes, dos);

				// String

				writeString(this.MoExplaination, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Mocodes=" + Mocodes);
			sb.append(",MoExplaination=" + MoExplaination);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Mocodes, other.Mocodes);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Crm_Cd;

		public Integer getCrm_Cd() {
			return this.Crm_Cd;
		}

		public String Crm_Cd_Desc;

		public String getCrm_Cd_Desc() {
			return this.Crm_Cd_Desc;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Crm_Cd == null) ? 0 : this.Crm_Cd.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.Crm_Cd == null) {
				if (other.Crm_Cd != null)
					return false;

			} else if (!this.Crm_Cd.equals(other.Crm_Cd))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.Crm_Cd = this.Crm_Cd;
			other.Crm_Cd_Desc = this.Crm_Cd_Desc;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.Crm_Cd = this.Crm_Cd;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.Crm_Cd = readInteger(dis);

					this.Crm_Cd_Desc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Crm_Cd, dos);

				// String

				writeString(this.Crm_Cd_Desc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Crm_Cd=" + String.valueOf(Crm_Cd));
			sb.append(",Crm_Cd_Desc=" + Crm_Cd_Desc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Crm_Cd, other.Crm_Cd);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Weapon_Used_Cd;

		public String getWeapon_Used_Cd() {
			return this.Weapon_Used_Cd;
		}

		public String Weapon_Desc;

		public String getWeapon_Desc() {
			return this.Weapon_Desc;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Weapon_Used_Cd == null) ? 0 : this.Weapon_Used_Cd.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.Weapon_Used_Cd == null) {
				if (other.Weapon_Used_Cd != null)
					return false;

			} else if (!this.Weapon_Used_Cd.equals(other.Weapon_Used_Cd))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.Weapon_Used_Cd = this.Weapon_Used_Cd;
			other.Weapon_Desc = this.Weapon_Desc;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.Weapon_Used_Cd = this.Weapon_Used_Cd;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.Weapon_Used_Cd = readString(dis);

					this.Weapon_Desc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Weapon_Used_Cd, dos);

				// String

				writeString(this.Weapon_Desc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Weapon_Used_Cd=" + Weapon_Used_Cd);
			sb.append(",Weapon_Desc=" + Weapon_Desc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Weapon_Used_Cd, other.Weapon_Used_Cd);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class crimes_outputStruct implements routines.system.IPersistableRow<crimes_outputStruct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String DR_NO;

		public String getDR_NO() {
			return this.DR_NO;
		}

		public String Date_Rptd;

		public String getDate_Rptd() {
			return this.Date_Rptd;
		}

		public String DATE_OCC;

		public String getDATE_OCC() {
			return this.DATE_OCC;
		}

		public String TIME_OCC;

		public String getTIME_OCC() {
			return this.TIME_OCC;
		}

		public Integer Crm_Cd;

		public Integer getCrm_Cd() {
			return this.Crm_Cd;
		}

		public String Crm_Cd_Desc;

		public String getCrm_Cd_Desc() {
			return this.Crm_Cd_Desc;
		}

		public String Mocodes;

		public String getMocodes() {
			return this.Mocodes;
		}

		public String Vict_Age;

		public String getVict_Age() {
			return this.Vict_Age;
		}

		public String Vict_Sex;

		public String getVict_Sex() {
			return this.Vict_Sex;
		}

		public String Vict_Descent;

		public String getVict_Descent() {
			return this.Vict_Descent;
		}

		public String Premis_Cd;

		public String getPremis_Cd() {
			return this.Premis_Cd;
		}

		public String Premis_Desc;

		public String getPremis_Desc() {
			return this.Premis_Desc;
		}

		public String Weapon_Used_Cd;

		public String getWeapon_Used_Cd() {
			return this.Weapon_Used_Cd;
		}

		public String Weapon_Desc;

		public String getWeapon_Desc() {
			return this.Weapon_Desc;
		}

		public String Crm_Cd_1;

		public String getCrm_Cd_1() {
			return this.Crm_Cd_1;
		}

		public String Crm_Cd_2;

		public String getCrm_Cd_2() {
			return this.Crm_Cd_2;
		}

		public String Crm_Cd_3;

		public String getCrm_Cd_3() {
			return this.Crm_Cd_3;
		}

		public String Crm_Cd_4;

		public String getCrm_Cd_4() {
			return this.Crm_Cd_4;
		}

		public String District;

		public String getDistrict() {
			return this.District;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.DR_NO == null) ? 0 : this.DR_NO.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final crimes_outputStruct other = (crimes_outputStruct) obj;

			if (this.DR_NO == null) {
				if (other.DR_NO != null)
					return false;

			} else if (!this.DR_NO.equals(other.DR_NO))

				return false;

			return true;
		}

		public void copyDataTo(crimes_outputStruct other) {

			other.DR_NO = this.DR_NO;
			other.Date_Rptd = this.Date_Rptd;
			other.DATE_OCC = this.DATE_OCC;
			other.TIME_OCC = this.TIME_OCC;
			other.Crm_Cd = this.Crm_Cd;
			other.Crm_Cd_Desc = this.Crm_Cd_Desc;
			other.Mocodes = this.Mocodes;
			other.Vict_Age = this.Vict_Age;
			other.Vict_Sex = this.Vict_Sex;
			other.Vict_Descent = this.Vict_Descent;
			other.Premis_Cd = this.Premis_Cd;
			other.Premis_Desc = this.Premis_Desc;
			other.Weapon_Used_Cd = this.Weapon_Used_Cd;
			other.Weapon_Desc = this.Weapon_Desc;
			other.Crm_Cd_1 = this.Crm_Cd_1;
			other.Crm_Cd_2 = this.Crm_Cd_2;
			other.Crm_Cd_3 = this.Crm_Cd_3;
			other.Crm_Cd_4 = this.Crm_Cd_4;
			other.District = this.District;

		}

		public void copyKeysDataTo(crimes_outputStruct other) {

			other.DR_NO = this.DR_NO;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.DR_NO = readString(dis);

					this.Date_Rptd = readString(dis);

					this.DATE_OCC = readString(dis);

					this.TIME_OCC = readString(dis);

					this.Crm_Cd = readInteger(dis);

					this.Crm_Cd_Desc = readString(dis);

					this.Mocodes = readString(dis);

					this.Vict_Age = readString(dis);

					this.Vict_Sex = readString(dis);

					this.Vict_Descent = readString(dis);

					this.Premis_Cd = readString(dis);

					this.Premis_Desc = readString(dis);

					this.Weapon_Used_Cd = readString(dis);

					this.Weapon_Desc = readString(dis);

					this.Crm_Cd_1 = readString(dis);

					this.Crm_Cd_2 = readString(dis);

					this.Crm_Cd_3 = readString(dis);

					this.Crm_Cd_4 = readString(dis);

					this.District = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DR_NO, dos);

				// String

				writeString(this.Date_Rptd, dos);

				// String

				writeString(this.DATE_OCC, dos);

				// String

				writeString(this.TIME_OCC, dos);

				// Integer

				writeInteger(this.Crm_Cd, dos);

				// String

				writeString(this.Crm_Cd_Desc, dos);

				// String

				writeString(this.Mocodes, dos);

				// String

				writeString(this.Vict_Age, dos);

				// String

				writeString(this.Vict_Sex, dos);

				// String

				writeString(this.Vict_Descent, dos);

				// String

				writeString(this.Premis_Cd, dos);

				// String

				writeString(this.Premis_Desc, dos);

				// String

				writeString(this.Weapon_Used_Cd, dos);

				// String

				writeString(this.Weapon_Desc, dos);

				// String

				writeString(this.Crm_Cd_1, dos);

				// String

				writeString(this.Crm_Cd_2, dos);

				// String

				writeString(this.Crm_Cd_3, dos);

				// String

				writeString(this.Crm_Cd_4, dos);

				// String

				writeString(this.District, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DR_NO=" + DR_NO);
			sb.append(",Date_Rptd=" + Date_Rptd);
			sb.append(",DATE_OCC=" + DATE_OCC);
			sb.append(",TIME_OCC=" + TIME_OCC);
			sb.append(",Crm_Cd=" + String.valueOf(Crm_Cd));
			sb.append(",Crm_Cd_Desc=" + Crm_Cd_Desc);
			sb.append(",Mocodes=" + Mocodes);
			sb.append(",Vict_Age=" + Vict_Age);
			sb.append(",Vict_Sex=" + Vict_Sex);
			sb.append(",Vict_Descent=" + Vict_Descent);
			sb.append(",Premis_Cd=" + Premis_Cd);
			sb.append(",Premis_Desc=" + Premis_Desc);
			sb.append(",Weapon_Used_Cd=" + Weapon_Used_Cd);
			sb.append(",Weapon_Desc=" + Weapon_Desc);
			sb.append(",Crm_Cd_1=" + Crm_Cd_1);
			sb.append(",Crm_Cd_2=" + Crm_Cd_2);
			sb.append(",Crm_Cd_3=" + Crm_Cd_3);
			sb.append(",Crm_Cd_4=" + Crm_Cd_4);
			sb.append(",District=" + District);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(crimes_outputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DR_NO, other.DR_NO);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class weapon_outputStruct implements routines.system.IPersistableRow<weapon_outputStruct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Weapon_Used_Cd;

		public String getWeapon_Used_Cd() {
			return this.Weapon_Used_Cd;
		}

		public String Weapon_Desc;

		public String getWeapon_Desc() {
			return this.Weapon_Desc;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Weapon_Used_Cd == null) ? 0 : this.Weapon_Used_Cd.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final weapon_outputStruct other = (weapon_outputStruct) obj;

			if (this.Weapon_Used_Cd == null) {
				if (other.Weapon_Used_Cd != null)
					return false;

			} else if (!this.Weapon_Used_Cd.equals(other.Weapon_Used_Cd))

				return false;

			return true;
		}

		public void copyDataTo(weapon_outputStruct other) {

			other.Weapon_Used_Cd = this.Weapon_Used_Cd;
			other.Weapon_Desc = this.Weapon_Desc;

		}

		public void copyKeysDataTo(weapon_outputStruct other) {

			other.Weapon_Used_Cd = this.Weapon_Used_Cd;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.Weapon_Used_Cd = readString(dis);

					this.Weapon_Desc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Weapon_Used_Cd, dos);

				// String

				writeString(this.Weapon_Desc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Weapon_Used_Cd=" + Weapon_Used_Cd);
			sb.append(",Weapon_Desc=" + Weapon_Desc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(weapon_outputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Weapon_Used_Cd, other.Weapon_Used_Cd);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class crime_outputStruct implements routines.system.IPersistableRow<crime_outputStruct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Crm_Cd;

		public Integer getCrm_Cd() {
			return this.Crm_Cd;
		}

		public String Crm_Cd_Desc;

		public String getCrm_Cd_Desc() {
			return this.Crm_Cd_Desc;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Crm_Cd == null) ? 0 : this.Crm_Cd.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final crime_outputStruct other = (crime_outputStruct) obj;

			if (this.Crm_Cd == null) {
				if (other.Crm_Cd != null)
					return false;

			} else if (!this.Crm_Cd.equals(other.Crm_Cd))

				return false;

			return true;
		}

		public void copyDataTo(crime_outputStruct other) {

			other.Crm_Cd = this.Crm_Cd;
			other.Crm_Cd_Desc = this.Crm_Cd_Desc;

		}

		public void copyKeysDataTo(crime_outputStruct other) {

			other.Crm_Cd = this.Crm_Cd;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.Crm_Cd = readInteger(dis);

					this.Crm_Cd_Desc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Crm_Cd, dos);

				// String

				writeString(this.Crm_Cd_Desc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Crm_Cd=" + String.valueOf(Crm_Cd));
			sb.append(",Crm_Cd_Desc=" + Crm_Cd_Desc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(crime_outputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Crm_Cd, other.Crm_Cd);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mode_operatoire_outputStruct
			implements routines.system.IPersistableRow<mode_operatoire_outputStruct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Mocodes;

		public String getMocodes() {
			return this.Mocodes;
		}

		public String MoExplaination;

		public String getMoExplaination() {
			return this.MoExplaination;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Mocodes == null) ? 0 : this.Mocodes.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final mode_operatoire_outputStruct other = (mode_operatoire_outputStruct) obj;

			if (this.Mocodes == null) {
				if (other.Mocodes != null)
					return false;

			} else if (!this.Mocodes.equals(other.Mocodes))

				return false;

			return true;
		}

		public void copyDataTo(mode_operatoire_outputStruct other) {

			other.Mocodes = this.Mocodes;
			other.MoExplaination = this.MoExplaination;

		}

		public void copyKeysDataTo(mode_operatoire_outputStruct other) {

			other.Mocodes = this.Mocodes;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.Mocodes = readString(dis);

					this.MoExplaination = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Mocodes, dos);

				// String

				writeString(this.MoExplaination, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Mocodes=" + Mocodes);
			sb.append(",MoExplaination=" + MoExplaination);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mode_operatoire_outputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Mocodes, other.Mocodes);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class day_outputStruct implements routines.system.IPersistableRow<day_outputStruct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];

		public java.util.Date DATE_OCC;

		public java.util.Date getDATE_OCC() {
			return this.DATE_OCC;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.DATE_OCC = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.DATE_OCC, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DATE_OCC=" + String.valueOf(DATE_OCC));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(day_outputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class time_outputStruct implements routines.system.IPersistableRow<time_outputStruct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Time;

		public Integer getTime() {
			return this.Time;
		}

		public Integer Hours;

		public Integer getHours() {
			return this.Hours;
		}

		public Integer Minutes;

		public Integer getMinutes() {
			return this.Minutes;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Time == null) ? 0 : this.Time.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final time_outputStruct other = (time_outputStruct) obj;

			if (this.Time == null) {
				if (other.Time != null)
					return false;

			} else if (!this.Time.equals(other.Time))

				return false;

			return true;
		}

		public void copyDataTo(time_outputStruct other) {

			other.Time = this.Time;
			other.Hours = this.Hours;
			other.Minutes = this.Minutes;

		}

		public void copyKeysDataTo(time_outputStruct other) {

			other.Time = this.Time;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.Time = readInteger(dis);

					this.Hours = readInteger(dis);

					this.Minutes = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Time, dos);

				// Integer

				writeInteger(this.Hours, dos);

				// Integer

				writeInteger(this.Minutes, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Time=" + String.valueOf(Time));
			sb.append(",Hours=" + String.valueOf(Hours));
			sb.append(",Minutes=" + String.valueOf(Minutes));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(time_outputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Time, other.Time);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class victim_outputStruct implements routines.system.IPersistableRow<victim_outputStruct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Vict_id;

		public String getVict_id() {
			return this.Vict_id;
		}

		public String Vict_Age;

		public String getVict_Age() {
			return this.Vict_Age;
		}

		public String Vict_Sex;

		public String getVict_Sex() {
			return this.Vict_Sex;
		}

		public String Vict_Descent;

		public String getVict_Descent() {
			return this.Vict_Descent;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Vict_id == null) ? 0 : this.Vict_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final victim_outputStruct other = (victim_outputStruct) obj;

			if (this.Vict_id == null) {
				if (other.Vict_id != null)
					return false;

			} else if (!this.Vict_id.equals(other.Vict_id))

				return false;

			return true;
		}

		public void copyDataTo(victim_outputStruct other) {

			other.Vict_id = this.Vict_id;
			other.Vict_Age = this.Vict_Age;
			other.Vict_Sex = this.Vict_Sex;
			other.Vict_Descent = this.Vict_Descent;

		}

		public void copyKeysDataTo(victim_outputStruct other) {

			other.Vict_id = this.Vict_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.Vict_id = readString(dis);

					this.Vict_Age = readString(dis);

					this.Vict_Sex = readString(dis);

					this.Vict_Descent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Vict_id, dos);

				// String

				writeString(this.Vict_Age, dos);

				// String

				writeString(this.Vict_Sex, dos);

				// String

				writeString(this.Vict_Descent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Vict_id=" + Vict_id);
			sb.append(",Vict_Age=" + Vict_Age);
			sb.append(",Vict_Sex=" + Vict_Sex);
			sb.append(",Vict_Descent=" + Vict_Descent);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(victim_outputStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Vict_id, other.Vict_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];

		public String DR_NO;

		public String getDR_NO() {
			return this.DR_NO;
		}

		public String Date_Rptd;

		public String getDate_Rptd() {
			return this.Date_Rptd;
		}

		public String DATE_OCC;

		public String getDATE_OCC() {
			return this.DATE_OCC;
		}

		public String TIME_OCC;

		public String getTIME_OCC() {
			return this.TIME_OCC;
		}

		public String AREA;

		public String getAREA() {
			return this.AREA;
		}

		public String AREA_NAME;

		public String getAREA_NAME() {
			return this.AREA_NAME;
		}

		public String Rpt_Dist_No;

		public String getRpt_Dist_No() {
			return this.Rpt_Dist_No;
		}

		public Integer Part_1_2;

		public Integer getPart_1_2() {
			return this.Part_1_2;
		}

		public Integer Crm_Cd;

		public Integer getCrm_Cd() {
			return this.Crm_Cd;
		}

		public String Crm_Cd_Desc;

		public String getCrm_Cd_Desc() {
			return this.Crm_Cd_Desc;
		}

		public String Mocodes;

		public String getMocodes() {
			return this.Mocodes;
		}

		public String Vict_Age;

		public String getVict_Age() {
			return this.Vict_Age;
		}

		public String Vict_Sex;

		public String getVict_Sex() {
			return this.Vict_Sex;
		}

		public String Vict_Descent;

		public String getVict_Descent() {
			return this.Vict_Descent;
		}

		public String Premis_Cd;

		public String getPremis_Cd() {
			return this.Premis_Cd;
		}

		public String Premis_Desc;

		public String getPremis_Desc() {
			return this.Premis_Desc;
		}

		public String Weapon_Used_Cd;

		public String getWeapon_Used_Cd() {
			return this.Weapon_Used_Cd;
		}

		public String Weapon_Desc;

		public String getWeapon_Desc() {
			return this.Weapon_Desc;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public String Status_Desc;

		public String getStatus_Desc() {
			return this.Status_Desc;
		}

		public String Crm_Cd_1;

		public String getCrm_Cd_1() {
			return this.Crm_Cd_1;
		}

		public String Crm_Cd_2;

		public String getCrm_Cd_2() {
			return this.Crm_Cd_2;
		}

		public String Crm_Cd_3;

		public String getCrm_Cd_3() {
			return this.Crm_Cd_3;
		}

		public String Crm_Cd_4;

		public String getCrm_Cd_4() {
			return this.Crm_Cd_4;
		}

		public String LOCATION;

		public String getLOCATION() {
			return this.LOCATION;
		}

		public String Cross_Street;

		public String getCross_Street() {
			return this.Cross_Street;
		}

		public String LAT;

		public String getLAT() {
			return this.LAT;
		}

		public String LON;

		public String getLON() {
			return this.LON;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.DR_NO = readString(dis);

					this.Date_Rptd = readString(dis);

					this.DATE_OCC = readString(dis);

					this.TIME_OCC = readString(dis);

					this.AREA = readString(dis);

					this.AREA_NAME = readString(dis);

					this.Rpt_Dist_No = readString(dis);

					this.Part_1_2 = readInteger(dis);

					this.Crm_Cd = readInteger(dis);

					this.Crm_Cd_Desc = readString(dis);

					this.Mocodes = readString(dis);

					this.Vict_Age = readString(dis);

					this.Vict_Sex = readString(dis);

					this.Vict_Descent = readString(dis);

					this.Premis_Cd = readString(dis);

					this.Premis_Desc = readString(dis);

					this.Weapon_Used_Cd = readString(dis);

					this.Weapon_Desc = readString(dis);

					this.Status = readString(dis);

					this.Status_Desc = readString(dis);

					this.Crm_Cd_1 = readString(dis);

					this.Crm_Cd_2 = readString(dis);

					this.Crm_Cd_3 = readString(dis);

					this.Crm_Cd_4 = readString(dis);

					this.LOCATION = readString(dis);

					this.Cross_Street = readString(dis);

					this.LAT = readString(dis);

					this.LON = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DR_NO, dos);

				// String

				writeString(this.Date_Rptd, dos);

				// String

				writeString(this.DATE_OCC, dos);

				// String

				writeString(this.TIME_OCC, dos);

				// String

				writeString(this.AREA, dos);

				// String

				writeString(this.AREA_NAME, dos);

				// String

				writeString(this.Rpt_Dist_No, dos);

				// Integer

				writeInteger(this.Part_1_2, dos);

				// Integer

				writeInteger(this.Crm_Cd, dos);

				// String

				writeString(this.Crm_Cd_Desc, dos);

				// String

				writeString(this.Mocodes, dos);

				// String

				writeString(this.Vict_Age, dos);

				// String

				writeString(this.Vict_Sex, dos);

				// String

				writeString(this.Vict_Descent, dos);

				// String

				writeString(this.Premis_Cd, dos);

				// String

				writeString(this.Premis_Desc, dos);

				// String

				writeString(this.Weapon_Used_Cd, dos);

				// String

				writeString(this.Weapon_Desc, dos);

				// String

				writeString(this.Status, dos);

				// String

				writeString(this.Status_Desc, dos);

				// String

				writeString(this.Crm_Cd_1, dos);

				// String

				writeString(this.Crm_Cd_2, dos);

				// String

				writeString(this.Crm_Cd_3, dos);

				// String

				writeString(this.Crm_Cd_4, dos);

				// String

				writeString(this.LOCATION, dos);

				// String

				writeString(this.Cross_Street, dos);

				// String

				writeString(this.LAT, dos);

				// String

				writeString(this.LON, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DR_NO=" + DR_NO);
			sb.append(",Date_Rptd=" + Date_Rptd);
			sb.append(",DATE_OCC=" + DATE_OCC);
			sb.append(",TIME_OCC=" + TIME_OCC);
			sb.append(",AREA=" + AREA);
			sb.append(",AREA_NAME=" + AREA_NAME);
			sb.append(",Rpt_Dist_No=" + Rpt_Dist_No);
			sb.append(",Part_1_2=" + String.valueOf(Part_1_2));
			sb.append(",Crm_Cd=" + String.valueOf(Crm_Cd));
			sb.append(",Crm_Cd_Desc=" + Crm_Cd_Desc);
			sb.append(",Mocodes=" + Mocodes);
			sb.append(",Vict_Age=" + Vict_Age);
			sb.append(",Vict_Sex=" + Vict_Sex);
			sb.append(",Vict_Descent=" + Vict_Descent);
			sb.append(",Premis_Cd=" + Premis_Cd);
			sb.append(",Premis_Desc=" + Premis_Desc);
			sb.append(",Weapon_Used_Cd=" + Weapon_Used_Cd);
			sb.append(",Weapon_Desc=" + Weapon_Desc);
			sb.append(",Status=" + Status);
			sb.append(",Status_Desc=" + Status_Desc);
			sb.append(",Crm_Cd_1=" + Crm_Cd_1);
			sb.append(",Crm_Cd_2=" + Crm_Cd_2);
			sb.append(",Crm_Cd_3=" + Crm_Cd_3);
			sb.append(",Crm_Cd_4=" + Crm_Cd_4);
			sb.append(",LOCATION=" + LOCATION);
			sb.append(",Cross_Street=" + Cross_Street);
			sb.append(",LAT=" + LAT);
			sb.append(",LON=" + LON);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String DR_NO;

		public String getDR_NO() {
			return this.DR_NO;
		}

		public String Date_Rptd;

		public String getDate_Rptd() {
			return this.Date_Rptd;
		}

		public String DATE_OCC;

		public String getDATE_OCC() {
			return this.DATE_OCC;
		}

		public String TIME_OCC;

		public String getTIME_OCC() {
			return this.TIME_OCC;
		}

		public String AREA;

		public String getAREA() {
			return this.AREA;
		}

		public String AREA_NAME;

		public String getAREA_NAME() {
			return this.AREA_NAME;
		}

		public String Rpt_Dist_No;

		public String getRpt_Dist_No() {
			return this.Rpt_Dist_No;
		}

		public Integer Part_1_2;

		public Integer getPart_1_2() {
			return this.Part_1_2;
		}

		public Integer Crm_Cd;

		public Integer getCrm_Cd() {
			return this.Crm_Cd;
		}

		public String Crm_Cd_Desc;

		public String getCrm_Cd_Desc() {
			return this.Crm_Cd_Desc;
		}

		public String Mocodes;

		public String getMocodes() {
			return this.Mocodes;
		}

		public String Vict_Age;

		public String getVict_Age() {
			return this.Vict_Age;
		}

		public String Vict_Sex;

		public String getVict_Sex() {
			return this.Vict_Sex;
		}

		public String Vict_Descent;

		public String getVict_Descent() {
			return this.Vict_Descent;
		}

		public String Premis_Cd;

		public String getPremis_Cd() {
			return this.Premis_Cd;
		}

		public String Premis_Desc;

		public String getPremis_Desc() {
			return this.Premis_Desc;
		}

		public String Weapon_Used_Cd;

		public String getWeapon_Used_Cd() {
			return this.Weapon_Used_Cd;
		}

		public String Weapon_Desc;

		public String getWeapon_Desc() {
			return this.Weapon_Desc;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public String Status_Desc;

		public String getStatus_Desc() {
			return this.Status_Desc;
		}

		public String Crm_Cd_1;

		public String getCrm_Cd_1() {
			return this.Crm_Cd_1;
		}

		public String Crm_Cd_2;

		public String getCrm_Cd_2() {
			return this.Crm_Cd_2;
		}

		public String Crm_Cd_3;

		public String getCrm_Cd_3() {
			return this.Crm_Cd_3;
		}

		public String Crm_Cd_4;

		public String getCrm_Cd_4() {
			return this.Crm_Cd_4;
		}

		public String LOCATION;

		public String getLOCATION() {
			return this.LOCATION;
		}

		public String Cross_Street;

		public String getCross_Street() {
			return this.Cross_Street;
		}

		public String LAT;

		public String getLAT() {
			return this.LAT;
		}

		public String LON;

		public String getLON() {
			return this.LON;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.DR_NO == null) ? 0 : this.DR_NO.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.DR_NO == null) {
				if (other.DR_NO != null)
					return false;

			} else if (!this.DR_NO.equals(other.DR_NO))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.DR_NO = this.DR_NO;
			other.Date_Rptd = this.Date_Rptd;
			other.DATE_OCC = this.DATE_OCC;
			other.TIME_OCC = this.TIME_OCC;
			other.AREA = this.AREA;
			other.AREA_NAME = this.AREA_NAME;
			other.Rpt_Dist_No = this.Rpt_Dist_No;
			other.Part_1_2 = this.Part_1_2;
			other.Crm_Cd = this.Crm_Cd;
			other.Crm_Cd_Desc = this.Crm_Cd_Desc;
			other.Mocodes = this.Mocodes;
			other.Vict_Age = this.Vict_Age;
			other.Vict_Sex = this.Vict_Sex;
			other.Vict_Descent = this.Vict_Descent;
			other.Premis_Cd = this.Premis_Cd;
			other.Premis_Desc = this.Premis_Desc;
			other.Weapon_Used_Cd = this.Weapon_Used_Cd;
			other.Weapon_Desc = this.Weapon_Desc;
			other.Status = this.Status;
			other.Status_Desc = this.Status_Desc;
			other.Crm_Cd_1 = this.Crm_Cd_1;
			other.Crm_Cd_2 = this.Crm_Cd_2;
			other.Crm_Cd_3 = this.Crm_Cd_3;
			other.Crm_Cd_4 = this.Crm_Cd_4;
			other.LOCATION = this.LOCATION;
			other.Cross_Street = this.Cross_Street;
			other.LAT = this.LAT;
			other.LON = this.LON;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.DR_NO = this.DR_NO;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.DR_NO = readString(dis);

					this.Date_Rptd = readString(dis);

					this.DATE_OCC = readString(dis);

					this.TIME_OCC = readString(dis);

					this.AREA = readString(dis);

					this.AREA_NAME = readString(dis);

					this.Rpt_Dist_No = readString(dis);

					this.Part_1_2 = readInteger(dis);

					this.Crm_Cd = readInteger(dis);

					this.Crm_Cd_Desc = readString(dis);

					this.Mocodes = readString(dis);

					this.Vict_Age = readString(dis);

					this.Vict_Sex = readString(dis);

					this.Vict_Descent = readString(dis);

					this.Premis_Cd = readString(dis);

					this.Premis_Desc = readString(dis);

					this.Weapon_Used_Cd = readString(dis);

					this.Weapon_Desc = readString(dis);

					this.Status = readString(dis);

					this.Status_Desc = readString(dis);

					this.Crm_Cd_1 = readString(dis);

					this.Crm_Cd_2 = readString(dis);

					this.Crm_Cd_3 = readString(dis);

					this.Crm_Cd_4 = readString(dis);

					this.LOCATION = readString(dis);

					this.Cross_Street = readString(dis);

					this.LAT = readString(dis);

					this.LON = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DR_NO, dos);

				// String

				writeString(this.Date_Rptd, dos);

				// String

				writeString(this.DATE_OCC, dos);

				// String

				writeString(this.TIME_OCC, dos);

				// String

				writeString(this.AREA, dos);

				// String

				writeString(this.AREA_NAME, dos);

				// String

				writeString(this.Rpt_Dist_No, dos);

				// Integer

				writeInteger(this.Part_1_2, dos);

				// Integer

				writeInteger(this.Crm_Cd, dos);

				// String

				writeString(this.Crm_Cd_Desc, dos);

				// String

				writeString(this.Mocodes, dos);

				// String

				writeString(this.Vict_Age, dos);

				// String

				writeString(this.Vict_Sex, dos);

				// String

				writeString(this.Vict_Descent, dos);

				// String

				writeString(this.Premis_Cd, dos);

				// String

				writeString(this.Premis_Desc, dos);

				// String

				writeString(this.Weapon_Used_Cd, dos);

				// String

				writeString(this.Weapon_Desc, dos);

				// String

				writeString(this.Status, dos);

				// String

				writeString(this.Status_Desc, dos);

				// String

				writeString(this.Crm_Cd_1, dos);

				// String

				writeString(this.Crm_Cd_2, dos);

				// String

				writeString(this.Crm_Cd_3, dos);

				// String

				writeString(this.Crm_Cd_4, dos);

				// String

				writeString(this.LOCATION, dos);

				// String

				writeString(this.Cross_Street, dos);

				// String

				writeString(this.LAT, dos);

				// String

				writeString(this.LON, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DR_NO=" + DR_NO);
			sb.append(",Date_Rptd=" + Date_Rptd);
			sb.append(",DATE_OCC=" + DATE_OCC);
			sb.append(",TIME_OCC=" + TIME_OCC);
			sb.append(",AREA=" + AREA);
			sb.append(",AREA_NAME=" + AREA_NAME);
			sb.append(",Rpt_Dist_No=" + Rpt_Dist_No);
			sb.append(",Part_1_2=" + String.valueOf(Part_1_2));
			sb.append(",Crm_Cd=" + String.valueOf(Crm_Cd));
			sb.append(",Crm_Cd_Desc=" + Crm_Cd_Desc);
			sb.append(",Mocodes=" + Mocodes);
			sb.append(",Vict_Age=" + Vict_Age);
			sb.append(",Vict_Sex=" + Vict_Sex);
			sb.append(",Vict_Descent=" + Vict_Descent);
			sb.append(",Premis_Cd=" + Premis_Cd);
			sb.append(",Premis_Desc=" + Premis_Desc);
			sb.append(",Weapon_Used_Cd=" + Weapon_Used_Cd);
			sb.append(",Weapon_Desc=" + Weapon_Desc);
			sb.append(",Status=" + Status);
			sb.append(",Status_Desc=" + Status_Desc);
			sb.append(",Crm_Cd_1=" + Crm_Cd_1);
			sb.append(",Crm_Cd_2=" + Crm_Cd_2);
			sb.append(",Crm_Cd_3=" + Crm_Cd_3);
			sb.append(",Crm_Cd_4=" + Crm_Cd_4);
			sb.append(",LOCATION=" + LOCATION);
			sb.append(",Cross_Street=" + Cross_Street);
			sb.append(",LAT=" + LAT);
			sb.append(",LON=" + LON);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DR_NO, other.DR_NO);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String DR_NO;

		public String getDR_NO() {
			return this.DR_NO;
		}

		public String Date_Rptd;

		public String getDate_Rptd() {
			return this.Date_Rptd;
		}

		public String DATE_OCC;

		public String getDATE_OCC() {
			return this.DATE_OCC;
		}

		public String TIME_OCC;

		public String getTIME_OCC() {
			return this.TIME_OCC;
		}

		public String AREA;

		public String getAREA() {
			return this.AREA;
		}

		public String AREA_NAME;

		public String getAREA_NAME() {
			return this.AREA_NAME;
		}

		public String Rpt_Dist_No;

		public String getRpt_Dist_No() {
			return this.Rpt_Dist_No;
		}

		public Integer Part_1_2;

		public Integer getPart_1_2() {
			return this.Part_1_2;
		}

		public Integer Crm_Cd;

		public Integer getCrm_Cd() {
			return this.Crm_Cd;
		}

		public String Crm_Cd_Desc;

		public String getCrm_Cd_Desc() {
			return this.Crm_Cd_Desc;
		}

		public String Mocodes;

		public String getMocodes() {
			return this.Mocodes;
		}

		public String Vict_Age;

		public String getVict_Age() {
			return this.Vict_Age;
		}

		public String Vict_Sex;

		public String getVict_Sex() {
			return this.Vict_Sex;
		}

		public String Vict_Descent;

		public String getVict_Descent() {
			return this.Vict_Descent;
		}

		public String Premis_Cd;

		public String getPremis_Cd() {
			return this.Premis_Cd;
		}

		public String Premis_Desc;

		public String getPremis_Desc() {
			return this.Premis_Desc;
		}

		public String Weapon_Used_Cd;

		public String getWeapon_Used_Cd() {
			return this.Weapon_Used_Cd;
		}

		public String Weapon_Desc;

		public String getWeapon_Desc() {
			return this.Weapon_Desc;
		}

		public String Status;

		public String getStatus() {
			return this.Status;
		}

		public String Status_Desc;

		public String getStatus_Desc() {
			return this.Status_Desc;
		}

		public String Crm_Cd_1;

		public String getCrm_Cd_1() {
			return this.Crm_Cd_1;
		}

		public String Crm_Cd_2;

		public String getCrm_Cd_2() {
			return this.Crm_Cd_2;
		}

		public String Crm_Cd_3;

		public String getCrm_Cd_3() {
			return this.Crm_Cd_3;
		}

		public String Crm_Cd_4;

		public String getCrm_Cd_4() {
			return this.Crm_Cd_4;
		}

		public String LOCATION;

		public String getLOCATION() {
			return this.LOCATION;
		}

		public String Cross_Street;

		public String getCross_Street() {
			return this.Cross_Street;
		}

		public String LAT;

		public String getLAT() {
			return this.LAT;
		}

		public String LON;

		public String getLON() {
			return this.LON;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.DR_NO == null) ? 0 : this.DR_NO.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;

			if (this.DR_NO == null) {
				if (other.DR_NO != null)
					return false;

			} else if (!this.DR_NO.equals(other.DR_NO))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_1Struct other) {

			other.DR_NO = this.DR_NO;
			other.Date_Rptd = this.Date_Rptd;
			other.DATE_OCC = this.DATE_OCC;
			other.TIME_OCC = this.TIME_OCC;
			other.AREA = this.AREA;
			other.AREA_NAME = this.AREA_NAME;
			other.Rpt_Dist_No = this.Rpt_Dist_No;
			other.Part_1_2 = this.Part_1_2;
			other.Crm_Cd = this.Crm_Cd;
			other.Crm_Cd_Desc = this.Crm_Cd_Desc;
			other.Mocodes = this.Mocodes;
			other.Vict_Age = this.Vict_Age;
			other.Vict_Sex = this.Vict_Sex;
			other.Vict_Descent = this.Vict_Descent;
			other.Premis_Cd = this.Premis_Cd;
			other.Premis_Desc = this.Premis_Desc;
			other.Weapon_Used_Cd = this.Weapon_Used_Cd;
			other.Weapon_Desc = this.Weapon_Desc;
			other.Status = this.Status;
			other.Status_Desc = this.Status_Desc;
			other.Crm_Cd_1 = this.Crm_Cd_1;
			other.Crm_Cd_2 = this.Crm_Cd_2;
			other.Crm_Cd_3 = this.Crm_Cd_3;
			other.Crm_Cd_4 = this.Crm_Cd_4;
			other.LOCATION = this.LOCATION;
			other.Cross_Street = this.Cross_Street;
			other.LAT = this.LAT;
			other.LON = this.LON;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

			other.DR_NO = this.DR_NO;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.DR_NO = readString(dis);

					this.Date_Rptd = readString(dis);

					this.DATE_OCC = readString(dis);

					this.TIME_OCC = readString(dis);

					this.AREA = readString(dis);

					this.AREA_NAME = readString(dis);

					this.Rpt_Dist_No = readString(dis);

					this.Part_1_2 = readInteger(dis);

					this.Crm_Cd = readInteger(dis);

					this.Crm_Cd_Desc = readString(dis);

					this.Mocodes = readString(dis);

					this.Vict_Age = readString(dis);

					this.Vict_Sex = readString(dis);

					this.Vict_Descent = readString(dis);

					this.Premis_Cd = readString(dis);

					this.Premis_Desc = readString(dis);

					this.Weapon_Used_Cd = readString(dis);

					this.Weapon_Desc = readString(dis);

					this.Status = readString(dis);

					this.Status_Desc = readString(dis);

					this.Crm_Cd_1 = readString(dis);

					this.Crm_Cd_2 = readString(dis);

					this.Crm_Cd_3 = readString(dis);

					this.Crm_Cd_4 = readString(dis);

					this.LOCATION = readString(dis);

					this.Cross_Street = readString(dis);

					this.LAT = readString(dis);

					this.LON = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DR_NO, dos);

				// String

				writeString(this.Date_Rptd, dos);

				// String

				writeString(this.DATE_OCC, dos);

				// String

				writeString(this.TIME_OCC, dos);

				// String

				writeString(this.AREA, dos);

				// String

				writeString(this.AREA_NAME, dos);

				// String

				writeString(this.Rpt_Dist_No, dos);

				// Integer

				writeInteger(this.Part_1_2, dos);

				// Integer

				writeInteger(this.Crm_Cd, dos);

				// String

				writeString(this.Crm_Cd_Desc, dos);

				// String

				writeString(this.Mocodes, dos);

				// String

				writeString(this.Vict_Age, dos);

				// String

				writeString(this.Vict_Sex, dos);

				// String

				writeString(this.Vict_Descent, dos);

				// String

				writeString(this.Premis_Cd, dos);

				// String

				writeString(this.Premis_Desc, dos);

				// String

				writeString(this.Weapon_Used_Cd, dos);

				// String

				writeString(this.Weapon_Desc, dos);

				// String

				writeString(this.Status, dos);

				// String

				writeString(this.Status_Desc, dos);

				// String

				writeString(this.Crm_Cd_1, dos);

				// String

				writeString(this.Crm_Cd_2, dos);

				// String

				writeString(this.Crm_Cd_3, dos);

				// String

				writeString(this.Crm_Cd_4, dos);

				// String

				writeString(this.LOCATION, dos);

				// String

				writeString(this.Cross_Street, dos);

				// String

				writeString(this.LAT, dos);

				// String

				writeString(this.LON, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DR_NO=" + DR_NO);
			sb.append(",Date_Rptd=" + Date_Rptd);
			sb.append(",DATE_OCC=" + DATE_OCC);
			sb.append(",TIME_OCC=" + TIME_OCC);
			sb.append(",AREA=" + AREA);
			sb.append(",AREA_NAME=" + AREA_NAME);
			sb.append(",Rpt_Dist_No=" + Rpt_Dist_No);
			sb.append(",Part_1_2=" + String.valueOf(Part_1_2));
			sb.append(",Crm_Cd=" + String.valueOf(Crm_Cd));
			sb.append(",Crm_Cd_Desc=" + Crm_Cd_Desc);
			sb.append(",Mocodes=" + Mocodes);
			sb.append(",Vict_Age=" + Vict_Age);
			sb.append(",Vict_Sex=" + Vict_Sex);
			sb.append(",Vict_Descent=" + Vict_Descent);
			sb.append(",Premis_Cd=" + Premis_Cd);
			sb.append(",Premis_Desc=" + Premis_Desc);
			sb.append(",Weapon_Used_Cd=" + Weapon_Used_Cd);
			sb.append(",Weapon_Desc=" + Weapon_Desc);
			sb.append(",Status=" + Status);
			sb.append(",Status_Desc=" + Status_Desc);
			sb.append(",Crm_Cd_1=" + Crm_Cd_1);
			sb.append(",Crm_Cd_2=" + Crm_Cd_2);
			sb.append(",Crm_Cd_3=" + Crm_Cd_3);
			sb.append(",Crm_Cd_4=" + Crm_Cd_4);
			sb.append(",LOCATION=" + LOCATION);
			sb.append(",Cross_Street=" + Cross_Street);
			sb.append(",LAT=" + LAT);
			sb.append(",LON=" + LON);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DR_NO, other.DR_NO);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				crimes_outputStruct crimes_output = new crimes_outputStruct();
				weapon_outputStruct weapon_output = new weapon_outputStruct();
				row5Struct row5 = new row5Struct();
				crime_outputStruct crime_output = new crime_outputStruct();
				row6Struct row6 = new row6Struct();
				mode_operatoire_outputStruct mode_operatoire_output = new mode_operatoire_outputStruct();
				row7Struct row7 = new row7Struct();
				day_outputStruct day_output = new day_outputStruct();
				row8Struct row8 = new row8Struct();
				time_outputStruct time_output = new time_outputStruct();
				row9Struct row9 = new row9Struct();
				victim_outputStruct victim_output = new victim_outputStruct();
				row10Struct row10 = new row10Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("crimes_output" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Users/roro1/Documents/5A_INFO/Projet BI/Crimes output.csv")).getAbsolutePath().replace("\\",
								"/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"C:/Users/roro1/Documents/5A_INFO/Projet BI/Weapon output.csv")).getAbsolutePath().replace("\\",
								"/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());

				currentComponent = "tUniqRow_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("weapon_output" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Weapon_Used_Cd;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.Weapon_Used_Cd == null) ? 0 : this.Weapon_Used_Cd.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.Weapon_Used_Cd == null) {
							if (other.Weapon_Used_Cd != null)
								return false;

						} else if (!this.Weapon_Used_Cd.equals(other.Weapon_Used_Cd))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"C:/Users/roro1/Documents/5A_INFO/Projet BI/Crime output.csv")).getAbsolutePath().replace("\\",
								"/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tUniqRow_4 begin ] start
				 */

				ok_Hash.put("tUniqRow_4", false);
				start_Hash.put("tUniqRow_4", System.currentTimeMillis());

				currentComponent = "tUniqRow_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("crime_output" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tUniqRow_4 = 0;

				class KeyStruct_tUniqRow_4 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer Crm_Cd;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Crm_Cd == null) ? 0 : this.Crm_Cd.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

						if (this.Crm_Cd == null) {
							if (other.Crm_Cd != null)
								return false;

						} else if (!this.Crm_Cd.equals(other.Crm_Cd))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_4 = 0;
				int nb_duplicates_tUniqRow_4 = 0;
				KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
				java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

				/**
				 * [tUniqRow_4 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						"C:/Users/roro1/Documents/5A_INFO/Projet BI/Mode Operatoire output.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
							fileName_tFileOutputDelimited_4.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
																		 * Start field
																		 * tFileOutputDelimited_4:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tUniqRow_5 begin ] start
				 */

				ok_Hash.put("tUniqRow_5", false);
				start_Hash.put("tUniqRow_5", System.currentTimeMillis());

				currentComponent = "tUniqRow_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("mode_operatoire_output" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tUniqRow_5 = 0;

				class KeyStruct_tUniqRow_5 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Mocodes;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Mocodes == null) ? 0 : this.Mocodes.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;

						if (this.Mocodes == null) {
							if (other.Mocodes != null)
								return false;

						} else if (!this.Mocodes.equals(other.Mocodes))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_5 = 0;
				int nb_duplicates_tUniqRow_5 = 0;
				KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
				java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>();

				/**
				 * [tUniqRow_5 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						"C:/Users/roro1/Documents/5A_INFO/Projet BI/Day output.csv")).getAbsolutePath().replace("\\",
								"/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
							fileName_tFileOutputDelimited_5.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);
				int nb_line_tFileOutputDelimited_5 = 0;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
																		 * Start field
																		 * tFileOutputDelimited_5:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_5 = null;

				java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				if (fileToDelete_tFileOutputDelimited_5.exists()) {
					fileToDelete_tFileOutputDelimited_5.delete();
				}
				outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
				resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tUniqRow_6 begin ] start
				 */

				ok_Hash.put("tUniqRow_6", false);
				start_Hash.put("tUniqRow_6", System.currentTimeMillis());

				currentComponent = "tUniqRow_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("day_output" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tUniqRow_6 = 0;

				class KeyStruct_tUniqRow_6 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					java.util.Date DATE_OCC;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.DATE_OCC == null) ? 0 : this.DATE_OCC.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;

						if (this.DATE_OCC == null) {
							if (other.DATE_OCC != null)
								return false;

						} else if (!this.DATE_OCC.equals(other.DATE_OCC))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_6 = 0;
				int nb_duplicates_tUniqRow_6 = 0;
				KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
				java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>();

				/**
				 * [tUniqRow_6 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						"C:/Users/roro1/Documents/5A_INFO/Projet Time output.csv")).getAbsolutePath().replace("\\",
								"/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
							fileName_tFileOutputDelimited_6.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);
				int nb_line_tFileOutputDelimited_6 = 0;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
																		 * Start field
																		 * tFileOutputDelimited_6:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;

				java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				if (fileToDelete_tFileOutputDelimited_6.exists()) {
					fileToDelete_tFileOutputDelimited_6.delete();
				}
				outtFileOutputDelimited_6 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_6", outtFileOutputDelimited_6);
				resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tUniqRow_7 begin ] start
				 */

				ok_Hash.put("tUniqRow_7", false);
				start_Hash.put("tUniqRow_7", System.currentTimeMillis());

				currentComponent = "tUniqRow_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("time_output" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tUniqRow_7 = 0;

				class KeyStruct_tUniqRow_7 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer Time;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Time == null) ? 0 : this.Time.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_7 other = (KeyStruct_tUniqRow_7) obj;

						if (this.Time == null) {
							if (other.Time != null)
								return false;

						} else if (!this.Time.equals(other.Time))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_7 = 0;
				int nb_duplicates_tUniqRow_7 = 0;
				KeyStruct_tUniqRow_7 finder_tUniqRow_7 = new KeyStruct_tUniqRow_7();
				java.util.Set<KeyStruct_tUniqRow_7> keystUniqRow_7 = new java.util.HashSet<KeyStruct_tUniqRow_7>();

				/**
				 * [tUniqRow_7 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						"C:/Users/roro1/Documents/5A_INFO/Projet BI/Victim output.csv")).getAbsolutePath().replace("\\",
								"/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
								fileName_tFileOutputDelimited_7.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
							fileName_tFileOutputDelimited_7.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
								fileName_tFileOutputDelimited_7.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME", fileName_tFileOutputDelimited_7);
				int nb_line_tFileOutputDelimited_7 = 0;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				final String OUT_DELIM_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /**
																		 * Start field
																		 * tFileOutputDelimited_7:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null && directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {
						dir_tFileOutputDelimited_7.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_7 = null;

				java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
				if (fileToDelete_tFileOutputDelimited_7.exists()) {
					fileToDelete_tFileOutputDelimited_7.delete();
				}
				outtFileOutputDelimited_7 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_7, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_7", outtFileOutputDelimited_7);
				resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

				/**
				 * [tFileOutputDelimited_7 begin ] stop
				 */

				/**
				 * [tUniqRow_8 begin ] start
				 */

				ok_Hash.put("tUniqRow_8", false);
				start_Hash.put("tUniqRow_8", System.currentTimeMillis());

				currentComponent = "tUniqRow_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("victim_output" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tUniqRow_8 = 0;

				class KeyStruct_tUniqRow_8 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Vict_id;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Vict_id == null) ? 0 : this.Vict_id.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;

						if (this.Vict_id == null) {
							if (other.Vict_id != null)
								return false;

						} else if (!this.Vict_id.equals(other.Vict_id))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_8 = 0;
				int nb_duplicates_tUniqRow_8 = 0;
				KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
				java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>();

				/**
				 * [tUniqRow_8 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<clean_mocodesStruct> tHash_Lookup_clean_mocodes = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<clean_mocodesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<clean_mocodesStruct>) globalMap
						.get("tHash_Lookup_clean_mocodes"));

				clean_mocodesStruct clean_mocodesHashKey = new clean_mocodesStruct();
				clean_mocodesStruct clean_mocodesDefault = new clean_mocodesStruct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				crimes_outputStruct crimes_output_tmp = new crimes_outputStruct();
				weapon_outputStruct weapon_output_tmp = new weapon_outputStruct();
				crime_outputStruct crime_output_tmp = new crime_outputStruct();
				mode_operatoire_outputStruct mode_operatoire_output_tmp = new mode_operatoire_outputStruct();
				day_outputStruct day_output_tmp = new day_outputStruct();
				time_outputStruct time_output_tmp = new time_outputStruct();
				victim_outputStruct victim_output_tmp = new victim_outputStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());

				currentComponent = "tUniqRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tUniqRow_2 = 0;

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						"C:/Users/roro1/Documents/5A_INFO/Projet BI/Crime_Data_from_2010_to_2019.csv"/**
																										 * End field
																										 * tFileInputDelimited_1:FILENAME
																										 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),
											"US-ASCII")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_1.readNext()) {

								totalLinetFileInputDelimited_1++;

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row1.DR_NO = null;

								row1.Date_Rptd = null;

								row1.DATE_OCC = null;

								row1.TIME_OCC = null;

								row1.AREA = null;

								row1.AREA_NAME = null;

								row1.Rpt_Dist_No = null;

								row1.Part_1_2 = null;

								row1.Crm_Cd = null;

								row1.Crm_Cd_Desc = null;

								row1.Mocodes = null;

								row1.Vict_Age = null;

								row1.Vict_Sex = null;

								row1.Vict_Descent = null;

								row1.Premis_Cd = null;

								row1.Premis_Desc = null;

								row1.Weapon_Used_Cd = null;

								row1.Weapon_Desc = null;

								row1.Status = null;

								row1.Status_Desc = null;

								row1.Crm_Cd_1 = null;

								row1.Crm_Cd_2 = null;

								row1.Crm_Cd_3 = null;

								row1.Crm_Cd_4 = null;

								row1.LOCATION = null;

								row1.Cross_Street = null;

								row1.LAT = null;

								row1.LON = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.DR_NO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.DR_NO = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Date_Rptd = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Date_Rptd = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.DATE_OCC = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.DATE_OCC = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.TIME_OCC = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.TIME_OCC = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.AREA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.AREA = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.AREA_NAME = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.AREA_NAME = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Rpt_Dist_No = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Rpt_Dist_No = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Part_1_2 = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Part_1_2", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Part_1_2 = null;

									}

								} else {

									row1.Part_1_2 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.Crm_Cd = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Crm_Cd", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.Crm_Cd = null;

									}

								} else {

									row1.Crm_Cd = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Crm_Cd_Desc = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Crm_Cd_Desc = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Mocodes = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Mocodes = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Vict_Age = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Vict_Age = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Vict_Sex = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Vict_Sex = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Vict_Descent = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Vict_Descent = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Premis_Cd = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Premis_Cd = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Premis_Desc = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Premis_Desc = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Weapon_Used_Cd = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Weapon_Used_Cd = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Weapon_Desc = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Weapon_Desc = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Status = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Status = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Status_Desc = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Status_Desc = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Crm_Cd_1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Crm_Cd_1 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 21;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Crm_Cd_2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Crm_Cd_2 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 22;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Crm_Cd_3 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Crm_Cd_3 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 23;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Crm_Cd_4 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Crm_Cd_4 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 24;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LOCATION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LOCATION = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 25;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Cross_Street = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Cross_Street = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 26;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LAT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LAT = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 27;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.LON = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.LON = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tUniqRow_2 main ] start
							 */

							currentComponent = "tUniqRow_2";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
							}

							row2.DR_NO = row1.DR_NO;
							row2.Date_Rptd = row1.Date_Rptd;
							row2.DATE_OCC = row1.DATE_OCC;
							row2.TIME_OCC = row1.TIME_OCC;
							row2.AREA = row1.AREA;
							row2.AREA_NAME = row1.AREA_NAME;
							row2.Rpt_Dist_No = row1.Rpt_Dist_No;
							row2.Part_1_2 = row1.Part_1_2;
							row2.Crm_Cd = row1.Crm_Cd;
							row2.Crm_Cd_Desc = row1.Crm_Cd_Desc;
							row2.Mocodes = row1.Mocodes;
							row2.Vict_Age = row1.Vict_Age;
							row2.Vict_Sex = row1.Vict_Sex;
							row2.Vict_Descent = row1.Vict_Descent;
							row2.Premis_Cd = row1.Premis_Cd;
							row2.Premis_Desc = row1.Premis_Desc;
							row2.Weapon_Used_Cd = row1.Weapon_Used_Cd;
							row2.Weapon_Desc = row1.Weapon_Desc;
							row2.Status = row1.Status;
							row2.Status_Desc = row1.Status_Desc;
							row2.Crm_Cd_1 = row1.Crm_Cd_1;
							row2.Crm_Cd_2 = row1.Crm_Cd_2;
							row2.Crm_Cd_3 = row1.Crm_Cd_3;
							row2.Crm_Cd_4 = row1.Crm_Cd_4;
							row2.LOCATION = row1.LOCATION;
							row2.Cross_Street = row1.Cross_Street;
							row2.LAT = row1.LAT;
							row2.LON = row1.LON;

							tos_count_tUniqRow_2++;

							/**
							 * [tUniqRow_2 main ] stop
							 */

							/**
							 * [tUniqRow_2 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_2";

							/**
							 * [tUniqRow_2 process_data_begin ] stop
							 */
// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								// row2
								// row2

								if (execStat) {
									runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "row4"
								///////////////////////////////////////////////

								boolean forceLooprow4 = false;

								row4Struct row4ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row4HashKey.DR_NO = row2.DR_NO;

									row4HashKey.hashCodeDirty = true;

									tHash_Lookup_row4.lookup(row4HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
									// and it contains more one result from keys : row4.DR_NO = '" +
									// row4HashKey.DR_NO + "'");
								} // G 071

								row4Struct row4 = null;

								row4Struct fromLookup_row4 = null;
								row4 = row4Default;

								if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

									fromLookup_row4 = tHash_Lookup_row4.next();

								} // G 099

								if (fromLookup_row4 != null) {
									row4 = fromLookup_row4;
								}

								///////////////////////////////////////////////
								// Starting Lookup Table "clean_mocodes"
								///////////////////////////////////////////////

								boolean forceLoopclean_mocodes = false;

								clean_mocodesStruct clean_mocodesObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									clean_mocodesHashKey.Mocodes = row2.Mocodes;

									clean_mocodesHashKey.hashCodeDirty = true;

									tHash_Lookup_clean_mocodes.lookup(clean_mocodesHashKey);

								} // G_TM_M_020

								if (tHash_Lookup_clean_mocodes != null
										&& tHash_Lookup_clean_mocodes.getCount(clean_mocodesHashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
									// 'clean_mocodes' and it contains more one result from keys :
									// clean_mocodes.Mocodes = '" + clean_mocodesHashKey.Mocodes + "'");
								} // G 071

								clean_mocodesStruct clean_mocodes = null;

								clean_mocodesStruct fromLookup_clean_mocodes = null;
								clean_mocodes = clean_mocodesDefault;

								if (tHash_Lookup_clean_mocodes != null && tHash_Lookup_clean_mocodes.hasNext()) { // G
																													// 099

									fromLookup_clean_mocodes = tHash_Lookup_clean_mocodes.next();

								} // G 099

								if (fromLookup_clean_mocodes != null) {
									clean_mocodes = fromLookup_clean_mocodes;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									crimes_output = null;
									weapon_output = null;
									crime_output = null;
									mode_operatoire_output = null;
									day_output = null;
									time_output = null;
									victim_output = null;

// # Output table : 'crimes_output'
									crimes_output_tmp.DR_NO = row2.DR_NO;
									crimes_output_tmp.Date_Rptd = row2.Date_Rptd;
									crimes_output_tmp.DATE_OCC = row2.DATE_OCC;
									crimes_output_tmp.TIME_OCC = row2.TIME_OCC;
									crimes_output_tmp.Crm_Cd = row2.Crm_Cd;
									crimes_output_tmp.Crm_Cd_Desc = row2.Crm_Cd_Desc;
									crimes_output_tmp.Mocodes = row2.Mocodes;
									crimes_output_tmp.Vict_Age = row2.Vict_Age;
									crimes_output_tmp.Vict_Sex = row2.Vict_Sex;
									crimes_output_tmp.Vict_Descent = row2.Vict_Descent;
									crimes_output_tmp.Premis_Cd = row2.Premis_Cd;
									crimes_output_tmp.Premis_Desc = row2.Premis_Desc;
									crimes_output_tmp.Weapon_Used_Cd = row2.Weapon_Used_Cd;
									crimes_output_tmp.Weapon_Desc = row2.Weapon_Desc;
									crimes_output_tmp.Crm_Cd_1 = row2.Crm_Cd_1;
									crimes_output_tmp.Crm_Cd_2 = row2.Crm_Cd_2;
									crimes_output_tmp.Crm_Cd_3 = row2.Crm_Cd_3;
									crimes_output_tmp.Crm_Cd_4 = row2.Crm_Cd_4;
									crimes_output_tmp.District = row4.District;
									crimes_output = crimes_output_tmp;

// # Output table : 'weapon_output'
									weapon_output_tmp.Weapon_Used_Cd = row2.Weapon_Used_Cd;
									weapon_output_tmp.Weapon_Desc = row2.Weapon_Desc;
									weapon_output = weapon_output_tmp;

// # Output table : 'crime_output'
									crime_output_tmp.Crm_Cd = row2.Crm_Cd;
									crime_output_tmp.Crm_Cd_Desc = row2.Crm_Cd_Desc;
									crime_output = crime_output_tmp;

// # Output table : 'mode_operatoire_output'
									mode_operatoire_output_tmp.Mocodes = row2.Mocodes;
									mode_operatoire_output_tmp.MoExplaination = clean_mocodes.Mocodes_Explaination;
									mode_operatoire_output = mode_operatoire_output_tmp;

// # Output table : 'day_output'
									day_output_tmp.DATE_OCC = TalendDate.parseDate("MM/dd/yyyy",
											StringHandling.LEFT(row2.DATE_OCC, 10));
									day_output = day_output_tmp;

// # Output table : 'time_output'
									time_output_tmp.Time = 30
											* Math.round(Mathematical.INT(StringHandling.RIGHT(row2.TIME_OCC, 2)) / 60)
											+ 100 * Mathematical.INT(StringHandling.LEFT(row2.TIME_OCC,
													-2 + StringHandling.LEN(row2.TIME_OCC)));
									time_output_tmp.Hours = Mathematical.INT(
											StringHandling.LEFT(row2.TIME_OCC, -2 + StringHandling.LEN(row2.TIME_OCC)));
									time_output_tmp.Minutes = 30
											* Math.round(Mathematical.INT(StringHandling.RIGHT(row2.TIME_OCC, 2)) / 60);
									time_output = time_output_tmp;

// # Output table : 'victim_output'
									victim_output_tmp.Vict_id = row2.Vict_Age + row2.Vict_Sex + row2.Vict_Descent;
									victim_output_tmp.Vict_Age = row2.Vict_Age;
									victim_output_tmp.Vict_Sex = row2.Vict_Sex;
									victim_output_tmp.Vict_Descent = row2.Vict_Descent;
									victim_output = victim_output_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "crimes_output"
								if (crimes_output != null) {

									/**
									 * [tFileOutputDelimited_1 main ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									// crimes_output
									// crimes_output

									if (execStat) {
										runStat.updateStatOnConnection("crimes_output" + iterateId, 1, 1);
									}

									StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
									if (crimes_output.DR_NO != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.DR_NO);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Date_Rptd != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Date_Rptd);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.DATE_OCC != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.DATE_OCC);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.TIME_OCC != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.TIME_OCC);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Crm_Cd != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Crm_Cd);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Crm_Cd_Desc != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Crm_Cd_Desc);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Mocodes != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Mocodes);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Vict_Age != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Vict_Age);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Vict_Sex != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Vict_Sex);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Vict_Descent != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Vict_Descent);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Premis_Cd != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Premis_Cd);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Premis_Desc != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Premis_Desc);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Weapon_Used_Cd != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Weapon_Used_Cd);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Weapon_Desc != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Weapon_Desc);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Crm_Cd_1 != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Crm_Cd_1);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Crm_Cd_2 != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Crm_Cd_2);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Crm_Cd_3 != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Crm_Cd_3);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.Crm_Cd_4 != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.Crm_Cd_4);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (crimes_output.District != null) {
										sb_tFileOutputDelimited_1.append(crimes_output.District);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

									nb_line_tFileOutputDelimited_1++;
									resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

									outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

									tos_count_tFileOutputDelimited_1++;

									/**
									 * [tFileOutputDelimited_1 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_1 process_data_begin ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									/**
									 * [tFileOutputDelimited_1 process_data_begin ] stop
									 */

									/**
									 * [tFileOutputDelimited_1 process_data_end ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									/**
									 * [tFileOutputDelimited_1 process_data_end ] stop
									 */

								} // End of branch "crimes_output"

// Start of branch "weapon_output"
								if (weapon_output != null) {

									/**
									 * [tUniqRow_3 main ] start
									 */

									currentComponent = "tUniqRow_3";

									// weapon_output
									// weapon_output

									if (execStat) {
										runStat.updateStatOnConnection("weapon_output" + iterateId, 1, 1);
									}

									row5 = null;
									if (weapon_output.Weapon_Used_Cd == null) {
										finder_tUniqRow_3.Weapon_Used_Cd = null;
									} else {
										finder_tUniqRow_3.Weapon_Used_Cd = weapon_output.Weapon_Used_Cd.toLowerCase();
									}
									finder_tUniqRow_3.hashCodeDirty = true;
									if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
										KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

										if (weapon_output.Weapon_Used_Cd == null) {
											new_tUniqRow_3.Weapon_Used_Cd = null;
										} else {
											new_tUniqRow_3.Weapon_Used_Cd = weapon_output.Weapon_Used_Cd.toLowerCase();
										}

										keystUniqRow_3.add(new_tUniqRow_3);
										if (row5 == null) {

											row5 = new row5Struct();
										}
										row5.Weapon_Used_Cd = weapon_output.Weapon_Used_Cd;
										row5.Weapon_Desc = weapon_output.Weapon_Desc;
										nb_uniques_tUniqRow_3++;
									} else {
										nb_duplicates_tUniqRow_3++;
									}

									tos_count_tUniqRow_3++;

									/**
									 * [tUniqRow_3 main ] stop
									 */

									/**
									 * [tUniqRow_3 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_3";

									/**
									 * [tUniqRow_3 process_data_begin ] stop
									 */
// Start of branch "row5"
									if (row5 != null) {

										/**
										 * [tFileOutputDelimited_2 main ] start
										 */

										currentComponent = "tFileOutputDelimited_2";

										// row5
										// row5

										if (execStat) {
											runStat.updateStatOnConnection("row5" + iterateId, 1, 1);
										}

										StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
										if (row5.Weapon_Used_Cd != null) {
											sb_tFileOutputDelimited_2.append(row5.Weapon_Used_Cd);
										}
										sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row5.Weapon_Desc != null) {
											sb_tFileOutputDelimited_2.append(row5.Weapon_Desc);
										}
										sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

										nb_line_tFileOutputDelimited_2++;
										resourceMap.put("nb_line_tFileOutputDelimited_2",
												nb_line_tFileOutputDelimited_2);

										outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

										tos_count_tFileOutputDelimited_2++;

										/**
										 * [tFileOutputDelimited_2 main ] stop
										 */

										/**
										 * [tFileOutputDelimited_2 process_data_begin ] start
										 */

										currentComponent = "tFileOutputDelimited_2";

										/**
										 * [tFileOutputDelimited_2 process_data_begin ] stop
										 */

										/**
										 * [tFileOutputDelimited_2 process_data_end ] start
										 */

										currentComponent = "tFileOutputDelimited_2";

										/**
										 * [tFileOutputDelimited_2 process_data_end ] stop
										 */

									} // End of branch "row5"

									/**
									 * [tUniqRow_3 process_data_end ] start
									 */

									currentComponent = "tUniqRow_3";

									/**
									 * [tUniqRow_3 process_data_end ] stop
									 */

								} // End of branch "weapon_output"

// Start of branch "crime_output"
								if (crime_output != null) {

									/**
									 * [tUniqRow_4 main ] start
									 */

									currentComponent = "tUniqRow_4";

									// crime_output
									// crime_output

									if (execStat) {
										runStat.updateStatOnConnection("crime_output" + iterateId, 1, 1);
									}

									row6 = null;
									finder_tUniqRow_4.Crm_Cd = crime_output.Crm_Cd;
									finder_tUniqRow_4.hashCodeDirty = true;
									if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
										KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

										new_tUniqRow_4.Crm_Cd = crime_output.Crm_Cd;

										keystUniqRow_4.add(new_tUniqRow_4);
										if (row6 == null) {

											row6 = new row6Struct();
										}
										row6.Crm_Cd = crime_output.Crm_Cd;
										row6.Crm_Cd_Desc = crime_output.Crm_Cd_Desc;
										nb_uniques_tUniqRow_4++;
									} else {
										nb_duplicates_tUniqRow_4++;
									}

									tos_count_tUniqRow_4++;

									/**
									 * [tUniqRow_4 main ] stop
									 */

									/**
									 * [tUniqRow_4 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_4";

									/**
									 * [tUniqRow_4 process_data_begin ] stop
									 */
// Start of branch "row6"
									if (row6 != null) {

										/**
										 * [tFileOutputDelimited_3 main ] start
										 */

										currentComponent = "tFileOutputDelimited_3";

										// row6
										// row6

										if (execStat) {
											runStat.updateStatOnConnection("row6" + iterateId, 1, 1);
										}

										StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
										if (row6.Crm_Cd != null) {
											sb_tFileOutputDelimited_3.append(row6.Crm_Cd);
										}
										sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
										if (row6.Crm_Cd_Desc != null) {
											sb_tFileOutputDelimited_3.append(row6.Crm_Cd_Desc);
										}
										sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

										nb_line_tFileOutputDelimited_3++;
										resourceMap.put("nb_line_tFileOutputDelimited_3",
												nb_line_tFileOutputDelimited_3);

										outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

										tos_count_tFileOutputDelimited_3++;

										/**
										 * [tFileOutputDelimited_3 main ] stop
										 */

										/**
										 * [tFileOutputDelimited_3 process_data_begin ] start
										 */

										currentComponent = "tFileOutputDelimited_3";

										/**
										 * [tFileOutputDelimited_3 process_data_begin ] stop
										 */

										/**
										 * [tFileOutputDelimited_3 process_data_end ] start
										 */

										currentComponent = "tFileOutputDelimited_3";

										/**
										 * [tFileOutputDelimited_3 process_data_end ] stop
										 */

									} // End of branch "row6"

									/**
									 * [tUniqRow_4 process_data_end ] start
									 */

									currentComponent = "tUniqRow_4";

									/**
									 * [tUniqRow_4 process_data_end ] stop
									 */

								} // End of branch "crime_output"

// Start of branch "mode_operatoire_output"
								if (mode_operatoire_output != null) {

									/**
									 * [tUniqRow_5 main ] start
									 */

									currentComponent = "tUniqRow_5";

									// mode_operatoire_output
									// mode_operatoire_output

									if (execStat) {
										runStat.updateStatOnConnection("mode_operatoire_output" + iterateId, 1, 1);
									}

									row7 = null;
									if (mode_operatoire_output.Mocodes == null) {
										finder_tUniqRow_5.Mocodes = null;
									} else {
										finder_tUniqRow_5.Mocodes = mode_operatoire_output.Mocodes.toLowerCase();
									}
									finder_tUniqRow_5.hashCodeDirty = true;
									if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
										KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

										if (mode_operatoire_output.Mocodes == null) {
											new_tUniqRow_5.Mocodes = null;
										} else {
											new_tUniqRow_5.Mocodes = mode_operatoire_output.Mocodes.toLowerCase();
										}

										keystUniqRow_5.add(new_tUniqRow_5);
										if (row7 == null) {

											row7 = new row7Struct();
										}
										row7.Mocodes = mode_operatoire_output.Mocodes;
										row7.MoExplaination = mode_operatoire_output.MoExplaination;
										nb_uniques_tUniqRow_5++;
									} else {
										nb_duplicates_tUniqRow_5++;
									}

									tos_count_tUniqRow_5++;

									/**
									 * [tUniqRow_5 main ] stop
									 */

									/**
									 * [tUniqRow_5 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_5";

									/**
									 * [tUniqRow_5 process_data_begin ] stop
									 */
// Start of branch "row7"
									if (row7 != null) {

										/**
										 * [tFileOutputDelimited_4 main ] start
										 */

										currentComponent = "tFileOutputDelimited_4";

										// row7
										// row7

										if (execStat) {
											runStat.updateStatOnConnection("row7" + iterateId, 1, 1);
										}

										StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
										if (row7.Mocodes != null) {
											sb_tFileOutputDelimited_4.append(row7.Mocodes);
										}
										sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
										if (row7.MoExplaination != null) {
											sb_tFileOutputDelimited_4.append(row7.MoExplaination);
										}
										sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

										nb_line_tFileOutputDelimited_4++;
										resourceMap.put("nb_line_tFileOutputDelimited_4",
												nb_line_tFileOutputDelimited_4);

										outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

										tos_count_tFileOutputDelimited_4++;

										/**
										 * [tFileOutputDelimited_4 main ] stop
										 */

										/**
										 * [tFileOutputDelimited_4 process_data_begin ] start
										 */

										currentComponent = "tFileOutputDelimited_4";

										/**
										 * [tFileOutputDelimited_4 process_data_begin ] stop
										 */

										/**
										 * [tFileOutputDelimited_4 process_data_end ] start
										 */

										currentComponent = "tFileOutputDelimited_4";

										/**
										 * [tFileOutputDelimited_4 process_data_end ] stop
										 */

									} // End of branch "row7"

									/**
									 * [tUniqRow_5 process_data_end ] start
									 */

									currentComponent = "tUniqRow_5";

									/**
									 * [tUniqRow_5 process_data_end ] stop
									 */

								} // End of branch "mode_operatoire_output"

// Start of branch "day_output"
								if (day_output != null) {

									/**
									 * [tUniqRow_6 main ] start
									 */

									currentComponent = "tUniqRow_6";

									// day_output
									// day_output

									if (execStat) {
										runStat.updateStatOnConnection("day_output" + iterateId, 1, 1);
									}

									row8 = null;
									finder_tUniqRow_6.DATE_OCC = day_output.DATE_OCC;
									finder_tUniqRow_6.hashCodeDirty = true;
									if (!keystUniqRow_6.contains(finder_tUniqRow_6)) {
										KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

										new_tUniqRow_6.DATE_OCC = day_output.DATE_OCC;

										keystUniqRow_6.add(new_tUniqRow_6);
										if (row8 == null) {

											row8 = new row8Struct();
										}
										row8.DATE_OCC = day_output.DATE_OCC;
										nb_uniques_tUniqRow_6++;
									} else {
										nb_duplicates_tUniqRow_6++;
									}

									tos_count_tUniqRow_6++;

									/**
									 * [tUniqRow_6 main ] stop
									 */

									/**
									 * [tUniqRow_6 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_6";

									/**
									 * [tUniqRow_6 process_data_begin ] stop
									 */
// Start of branch "row8"
									if (row8 != null) {

										/**
										 * [tFileOutputDelimited_5 main ] start
										 */

										currentComponent = "tFileOutputDelimited_5";

										// row8
										// row8

										if (execStat) {
											runStat.updateStatOnConnection("row8" + iterateId, 1, 1);
										}

										StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
										if (row8.DATE_OCC != null) {
											sb_tFileOutputDelimited_5
													.append(FormatterUtils.format_Date(row8.DATE_OCC, "dd-MM-yyyy"));
										}
										sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

										nb_line_tFileOutputDelimited_5++;
										resourceMap.put("nb_line_tFileOutputDelimited_5",
												nb_line_tFileOutputDelimited_5);

										outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());

										tos_count_tFileOutputDelimited_5++;

										/**
										 * [tFileOutputDelimited_5 main ] stop
										 */

										/**
										 * [tFileOutputDelimited_5 process_data_begin ] start
										 */

										currentComponent = "tFileOutputDelimited_5";

										/**
										 * [tFileOutputDelimited_5 process_data_begin ] stop
										 */

										/**
										 * [tFileOutputDelimited_5 process_data_end ] start
										 */

										currentComponent = "tFileOutputDelimited_5";

										/**
										 * [tFileOutputDelimited_5 process_data_end ] stop
										 */

									} // End of branch "row8"

									/**
									 * [tUniqRow_6 process_data_end ] start
									 */

									currentComponent = "tUniqRow_6";

									/**
									 * [tUniqRow_6 process_data_end ] stop
									 */

								} // End of branch "day_output"

// Start of branch "time_output"
								if (time_output != null) {

									/**
									 * [tUniqRow_7 main ] start
									 */

									currentComponent = "tUniqRow_7";

									// time_output
									// time_output

									if (execStat) {
										runStat.updateStatOnConnection("time_output" + iterateId, 1, 1);
									}

									row9 = null;
									finder_tUniqRow_7.Time = time_output.Time;
									finder_tUniqRow_7.hashCodeDirty = true;
									if (!keystUniqRow_7.contains(finder_tUniqRow_7)) {
										KeyStruct_tUniqRow_7 new_tUniqRow_7 = new KeyStruct_tUniqRow_7();

										new_tUniqRow_7.Time = time_output.Time;

										keystUniqRow_7.add(new_tUniqRow_7);
										if (row9 == null) {

											row9 = new row9Struct();
										}
										row9.Time = time_output.Time;
										row9.Hours = time_output.Hours;
										row9.Minutes = time_output.Minutes;
										nb_uniques_tUniqRow_7++;
									} else {
										nb_duplicates_tUniqRow_7++;
									}

									tos_count_tUniqRow_7++;

									/**
									 * [tUniqRow_7 main ] stop
									 */

									/**
									 * [tUniqRow_7 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_7";

									/**
									 * [tUniqRow_7 process_data_begin ] stop
									 */
// Start of branch "row9"
									if (row9 != null) {

										/**
										 * [tFileOutputDelimited_6 main ] start
										 */

										currentComponent = "tFileOutputDelimited_6";

										// row9
										// row9

										if (execStat) {
											runStat.updateStatOnConnection("row9" + iterateId, 1, 1);
										}

										StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
										if (row9.Time != null) {
											sb_tFileOutputDelimited_6.append(row9.Time);
										}
										sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
										if (row9.Hours != null) {
											sb_tFileOutputDelimited_6.append(row9.Hours);
										}
										sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
										if (row9.Minutes != null) {
											sb_tFileOutputDelimited_6.append(row9.Minutes);
										}
										sb_tFileOutputDelimited_6.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

										nb_line_tFileOutputDelimited_6++;
										resourceMap.put("nb_line_tFileOutputDelimited_6",
												nb_line_tFileOutputDelimited_6);

										outtFileOutputDelimited_6.write(sb_tFileOutputDelimited_6.toString());

										tos_count_tFileOutputDelimited_6++;

										/**
										 * [tFileOutputDelimited_6 main ] stop
										 */

										/**
										 * [tFileOutputDelimited_6 process_data_begin ] start
										 */

										currentComponent = "tFileOutputDelimited_6";

										/**
										 * [tFileOutputDelimited_6 process_data_begin ] stop
										 */

										/**
										 * [tFileOutputDelimited_6 process_data_end ] start
										 */

										currentComponent = "tFileOutputDelimited_6";

										/**
										 * [tFileOutputDelimited_6 process_data_end ] stop
										 */

									} // End of branch "row9"

									/**
									 * [tUniqRow_7 process_data_end ] start
									 */

									currentComponent = "tUniqRow_7";

									/**
									 * [tUniqRow_7 process_data_end ] stop
									 */

								} // End of branch "time_output"

// Start of branch "victim_output"
								if (victim_output != null) {

									/**
									 * [tUniqRow_8 main ] start
									 */

									currentComponent = "tUniqRow_8";

									// victim_output
									// victim_output

									if (execStat) {
										runStat.updateStatOnConnection("victim_output" + iterateId, 1, 1);
									}

									row10 = null;
									if (victim_output.Vict_id == null) {
										finder_tUniqRow_8.Vict_id = null;
									} else {
										finder_tUniqRow_8.Vict_id = victim_output.Vict_id.toLowerCase();
									}
									finder_tUniqRow_8.hashCodeDirty = true;
									if (!keystUniqRow_8.contains(finder_tUniqRow_8)) {
										KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

										if (victim_output.Vict_id == null) {
											new_tUniqRow_8.Vict_id = null;
										} else {
											new_tUniqRow_8.Vict_id = victim_output.Vict_id.toLowerCase();
										}

										keystUniqRow_8.add(new_tUniqRow_8);
										if (row10 == null) {

											row10 = new row10Struct();
										}
										row10.Vict_id = victim_output.Vict_id;
										row10.Vict_Age = victim_output.Vict_Age;
										row10.Vict_Sex = victim_output.Vict_Sex;
										row10.Vict_Descent = victim_output.Vict_Descent;
										nb_uniques_tUniqRow_8++;
									} else {
										nb_duplicates_tUniqRow_8++;
									}

									tos_count_tUniqRow_8++;

									/**
									 * [tUniqRow_8 main ] stop
									 */

									/**
									 * [tUniqRow_8 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_8";

									/**
									 * [tUniqRow_8 process_data_begin ] stop
									 */
// Start of branch "row10"
									if (row10 != null) {

										/**
										 * [tFileOutputDelimited_7 main ] start
										 */

										currentComponent = "tFileOutputDelimited_7";

										// row10
										// row10

										if (execStat) {
											runStat.updateStatOnConnection("row10" + iterateId, 1, 1);
										}

										StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
										if (row10.Vict_id != null) {
											sb_tFileOutputDelimited_7.append(row10.Vict_id);
										}
										sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
										if (row10.Vict_Age != null) {
											sb_tFileOutputDelimited_7.append(row10.Vict_Age);
										}
										sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
										if (row10.Vict_Sex != null) {
											sb_tFileOutputDelimited_7.append(row10.Vict_Sex);
										}
										sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
										if (row10.Vict_Descent != null) {
											sb_tFileOutputDelimited_7.append(row10.Vict_Descent);
										}
										sb_tFileOutputDelimited_7.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

										nb_line_tFileOutputDelimited_7++;
										resourceMap.put("nb_line_tFileOutputDelimited_7",
												nb_line_tFileOutputDelimited_7);

										outtFileOutputDelimited_7.write(sb_tFileOutputDelimited_7.toString());

										tos_count_tFileOutputDelimited_7++;

										/**
										 * [tFileOutputDelimited_7 main ] stop
										 */

										/**
										 * [tFileOutputDelimited_7 process_data_begin ] start
										 */

										currentComponent = "tFileOutputDelimited_7";

										/**
										 * [tFileOutputDelimited_7 process_data_begin ] stop
										 */

										/**
										 * [tFileOutputDelimited_7 process_data_end ] start
										 */

										currentComponent = "tFileOutputDelimited_7";

										/**
										 * [tFileOutputDelimited_7 process_data_end ] stop
										 */

									} // End of branch "row10"

									/**
									 * [tUniqRow_8 process_data_end ] start
									 */

									currentComponent = "tUniqRow_8";

									/**
									 * [tUniqRow_8 process_data_end ] stop
									 */

								} // End of branch "victim_output"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tUniqRow_2 process_data_end ] start
							 */

							currentComponent = "tUniqRow_2";

							/**
							 * [tUniqRow_2 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_duplicates_tUniqRow_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_clean_mocodes != null) {
					tHash_Lookup_clean_mocodes.endGet();
				}
				globalMap.remove("tHash_Lookup_clean_mocodes");

// ###############################      

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("crimes_output" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES", nb_duplicates_tUniqRow_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("weapon_output" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tUniqRow_4 end ] start
				 */

				currentComponent = "tUniqRow_4";

				globalMap.put("tUniqRow_4_NB_UNIQUES", nb_uniques_tUniqRow_4);
				globalMap.put("tUniqRow_4_NB_DUPLICATES", nb_duplicates_tUniqRow_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("crime_output" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUniqRow_4", true);
				end_Hash.put("tUniqRow_4", System.currentTimeMillis());

				/**
				 * [tUniqRow_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tUniqRow_5 end ] start
				 */

				currentComponent = "tUniqRow_5";

				globalMap.put("tUniqRow_5_NB_UNIQUES", nb_uniques_tUniqRow_5);
				globalMap.put("tUniqRow_5_NB_DUPLICATES", nb_duplicates_tUniqRow_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("mode_operatoire_output" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUniqRow_5", true);
				end_Hash.put("tUniqRow_5", System.currentTimeMillis());

				/**
				 * [tUniqRow_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE", nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tUniqRow_6 end ] start
				 */

				currentComponent = "tUniqRow_6";

				globalMap.put("tUniqRow_6_NB_UNIQUES", nb_uniques_tUniqRow_6);
				globalMap.put("tUniqRow_6_NB_DUPLICATES", nb_duplicates_tUniqRow_6);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("day_output" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUniqRow_6", true);
				end_Hash.put("tUniqRow_6", System.currentTimeMillis());

				/**
				 * [tUniqRow_6 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (outtFileOutputDelimited_5 != null) {
					outtFileOutputDelimited_5.flush();
					outtFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE", nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

				/**
				 * [tUniqRow_7 end ] start
				 */

				currentComponent = "tUniqRow_7";

				globalMap.put("tUniqRow_7_NB_UNIQUES", nb_uniques_tUniqRow_7);
				globalMap.put("tUniqRow_7_NB_DUPLICATES", nb_duplicates_tUniqRow_7);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("time_output" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUniqRow_7", true);
				end_Hash.put("tUniqRow_7", System.currentTimeMillis());

				/**
				 * [tUniqRow_7 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (outtFileOutputDelimited_6 != null) {
					outtFileOutputDelimited_6.flush();
					outtFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE", nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

				/**
				 * [tUniqRow_8 end ] start
				 */

				currentComponent = "tUniqRow_8";

				globalMap.put("tUniqRow_8_NB_UNIQUES", nb_uniques_tUniqRow_8);
				globalMap.put("tUniqRow_8_NB_DUPLICATES", nb_duplicates_tUniqRow_8);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("victim_output" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUniqRow_8", true);
				end_Hash.put("tUniqRow_8", System.currentTimeMillis());

				/**
				 * [tUniqRow_8 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 end ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (outtFileOutputDelimited_7 != null) {
					outtFileOutputDelimited_7.flush();
					outtFileOutputDelimited_7.close();
				}

				globalMap.put("tFileOutputDelimited_7_NB_LINE", nb_line_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME", fileName_tFileOutputDelimited_7);

				resourceMap.put("finish_tFileOutputDelimited_7", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_clean_mocodes");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tUniqRow_3 finally ] start
				 */

				currentComponent = "tUniqRow_3";

				/**
				 * [tUniqRow_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tUniqRow_4 finally ] start
				 */

				currentComponent = "tUniqRow_4";

				/**
				 * [tUniqRow_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

				/**
				 * [tUniqRow_5 finally ] start
				 */

				currentComponent = "tUniqRow_5";

				/**
				 * [tUniqRow_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

				/**
				 * [tUniqRow_6 finally ] start
				 */

				currentComponent = "tUniqRow_6";

				/**
				 * [tUniqRow_6 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_5");
					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

				/**
				 * [tUniqRow_7 finally ] start
				 */

				currentComponent = "tUniqRow_7";

				/**
				 * [tUniqRow_7 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_6");
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

				/**
				 * [tUniqRow_8 finally ] start
				 */

				currentComponent = "tUniqRow_8";

				/**
				 * [tUniqRow_8 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (resourceMap.get("finish_tFileOutputDelimited_7") == null) {

					java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_7");
					if (outtFileOutputDelimited_7 != null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}

				}

				/**
				 * [tFileOutputDelimited_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String DR_NO;

		public String getDR_NO() {
			return this.DR_NO;
		}

		public String District;

		public String getDistrict() {
			return this.District;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.DR_NO == null) ? 0 : this.DR_NO.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.DR_NO == null) {
				if (other.DR_NO != null)
					return false;

			} else if (!this.DR_NO.equals(other.DR_NO))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.DR_NO = this.DR_NO;
			other.District = this.District;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.DR_NO = this.DR_NO;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.DR_NO = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DR_NO, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.District = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.District, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DR_NO=" + DR_NO);
			sb.append(",District=" + District);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DR_NO, other.DR_NO);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String DR_NO;

		public String getDR_NO() {
			return this.DR_NO;
		}

		public String District;

		public String getDistrict() {
			return this.District;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.DR_NO == null) ? 0 : this.DR_NO.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.DR_NO == null) {
				if (other.DR_NO != null)
					return false;

			} else if (!this.DR_NO.equals(other.DR_NO))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.DR_NO = this.DR_NO;
			other.District = this.District;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.DR_NO = this.DR_NO;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.DR_NO = readString(dis);

					this.District = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DR_NO, dos);

				// String

				writeString(this.District, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DR_NO=" + DR_NO);
			sb.append(",District=" + District);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DR_NO, other.DR_NO);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tUniqRow_1 - inputs:(row3) outputs:(row4,row4) | target
				// node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row2,row4,clean_mocodes)
				// outputs:(crimes_output,weapon_output,crime_output,mode_operatoire_output,day_output,time_output,victim_output)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tUniqRow_1 = 0;

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Users/roro1/Documents/5A_INFO/Projet BI/Crime_Districts.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/roro1/Documents/5A_INFO/Projet BI/Crime_Districts.csv", "US-ASCII", ",", "\n",
								false, 1, 0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row3 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row3.DR_NO = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row3.District = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tUniqRow_1 main ] start
							 */

							currentComponent = "tUniqRow_1";

							// row3
							// row3

							if (execStat) {
								runStat.updateStatOnConnection("row3" + iterateId, 1, 1);
							}

							row4.DR_NO = row3.DR_NO;
							row4.District = row3.District;
							row4.DR_NO = row3.DR_NO;
							row4.District = row3.District;

							tos_count_tUniqRow_1++;

							/**
							 * [tUniqRow_1 main ] stop
							 */

							/**
							 * [tUniqRow_1 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_begin ] stop
							 */
// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tAdvancedHash_row4 main ] start
								 */

								currentComponent = "tAdvancedHash_row4";

								// row4
								// row4

								if (execStat) {
									runStat.updateStatOnConnection("row4" + iterateId, 1, 1);
								}

								row4Struct row4_HashRow = new row4Struct();

								row4_HashRow.DR_NO = row4.DR_NO;

								row4_HashRow.District = row4.District;

								tHash_Lookup_row4.put(row4_HashRow);

								tos_count_tAdvancedHash_row4++;

								/**
								 * [tAdvancedHash_row4 main ] stop
								 */

								/**
								 * [tAdvancedHash_row4 process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_row4";

								/**
								 * [tAdvancedHash_row4 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row4 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row4";

								/**
								 * [tAdvancedHash_row4 process_data_end ] stop
								 */

							} // End of branch "row4"

							/**
							 * [tUniqRow_1 process_data_end ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Users/roro1/Documents/5A_INFO/Projet BI/Crime_Districts.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class clean_mocodesStruct
			implements routines.system.IPersistableComparableLookupRow<clean_mocodesStruct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Mocodes;

		public String getMocodes() {
			return this.Mocodes;
		}

		public String Mocodes_Explaination;

		public String getMocodes_Explaination() {
			return this.Mocodes_Explaination;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Mocodes == null) ? 0 : this.Mocodes.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final clean_mocodesStruct other = (clean_mocodesStruct) obj;

			if (this.Mocodes == null) {
				if (other.Mocodes != null)
					return false;

			} else if (!this.Mocodes.equals(other.Mocodes))

				return false;

			return true;
		}

		public void copyDataTo(clean_mocodesStruct other) {

			other.Mocodes = this.Mocodes;
			other.Mocodes_Explaination = this.Mocodes_Explaination;

		}

		public void copyKeysDataTo(clean_mocodesStruct other) {

			other.Mocodes = this.Mocodes;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.Mocodes = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Mocodes, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Mocodes_Explaination = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Mocodes_Explaination, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Mocodes=" + Mocodes);
			sb.append(",Mocodes_Explaination=" + Mocodes_Explaination);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(clean_mocodesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Mocodes, other.Mocodes);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_BI5A_Dimensions = new byte[0];
		static byte[] commonByteArray_BI5A_Dimensions = new byte[0];

		public String Column0;

		public String getColumn0() {
			return this.Column0;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BI5A_Dimensions.length) {
					if (length < 1024 && commonByteArray_BI5A_Dimensions.length == 0) {
						commonByteArray_BI5A_Dimensions = new byte[1024];
					} else {
						commonByteArray_BI5A_Dimensions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BI5A_Dimensions, 0, length);
				strReturn = new String(commonByteArray_BI5A_Dimensions, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BI5A_Dimensions) {

				try {

					int length = 0;

					this.Column0 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Column0, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Column0=" + Column0);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				clean_mocodesStruct clean_mocodes = new clean_mocodesStruct();

				/**
				 * [tAdvancedHash_clean_mocodes begin ] start
				 */

				ok_Hash.put("tAdvancedHash_clean_mocodes", false);
				start_Hash.put("tAdvancedHash_clean_mocodes", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_clean_mocodes";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("clean_mocodes" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tAdvancedHash_clean_mocodes = 0;

				// connection name:clean_mocodes
				// source node:tMap_2 - inputs:(row11) outputs:(clean_mocodes,clean_mocodes) |
				// target node:tAdvancedHash_clean_mocodes - inputs:(clean_mocodes) outputs:()
				// linked node: tMap_1 - inputs:(row2,row4,clean_mocodes)
				// outputs:(crimes_output,weapon_output,crime_output,mode_operatoire_output,day_output,time_output,victim_output)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_clean_mocodes = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<clean_mocodesStruct> tHash_Lookup_clean_mocodes = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<clean_mocodesStruct>getLookup(matchingModeEnum_clean_mocodes);

				globalMap.put("tHash_Lookup_clean_mocodes", tHash_Lookup_clean_mocodes);

				/**
				 * [tAdvancedHash_clean_mocodes begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				clean_mocodesStruct clean_mocodes_tmp = new clean_mocodesStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "C:/Users/roro1/Documents/5A_INFO/Projet BI/mocodes.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/roro1/Documents/5A_INFO/Projet BI/mocodes.csv", "US-ASCII", ";", "\n", false,
								0, 0, limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row11 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row11 = new row11Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row11.Column0 = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row11 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row11"
						if (row11 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							// row11
							// row11

							if (execStat) {
								runStat.updateStatOnConnection("row11" + iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								clean_mocodes = null;

// # Output table : 'clean_mocodes'
								clean_mocodes_tmp.Mocodes = StringHandling.LEFT(row11.Column0, 4);
								clean_mocodes_tmp.Mocodes_Explaination = StringHandling.RIGHT(row11.Column0,
										StringHandling.LEN(row11.Column0) - 5);
								clean_mocodes = clean_mocodes_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "clean_mocodes"
							if (clean_mocodes != null) {

								/**
								 * [tAdvancedHash_clean_mocodes main ] start
								 */

								currentComponent = "tAdvancedHash_clean_mocodes";

								// clean_mocodes
								// clean_mocodes

								if (execStat) {
									runStat.updateStatOnConnection("clean_mocodes" + iterateId, 1, 1);
								}

								clean_mocodesStruct clean_mocodes_HashRow = new clean_mocodesStruct();

								clean_mocodes_HashRow.Mocodes = clean_mocodes.Mocodes;

								clean_mocodes_HashRow.Mocodes_Explaination = clean_mocodes.Mocodes_Explaination;

								tHash_Lookup_clean_mocodes.put(clean_mocodes_HashRow);

								tos_count_tAdvancedHash_clean_mocodes++;

								/**
								 * [tAdvancedHash_clean_mocodes main ] stop
								 */

								/**
								 * [tAdvancedHash_clean_mocodes process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_clean_mocodes";

								/**
								 * [tAdvancedHash_clean_mocodes process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_clean_mocodes process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_clean_mocodes";

								/**
								 * [tAdvancedHash_clean_mocodes process_data_end ] stop
								 */

							} // End of branch "clean_mocodes"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row11"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/Users/roro1/Documents/5A_INFO/Projet BI/mocodes.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_clean_mocodes end ] start
				 */

				currentComponent = "tAdvancedHash_clean_mocodes";

				tHash_Lookup_clean_mocodes.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("clean_mocodes" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_clean_mocodes", true);
				end_Hash.put("tAdvancedHash_clean_mocodes", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_clean_mocodes end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_clean_mocodes finally ] start
				 */

				currentComponent = "tAdvancedHash_clean_mocodes";

				/**
				 * [tAdvancedHash_clean_mocodes finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Dimensions DimensionsClass = new Dimensions();

		int exitCode = DimensionsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Dimensions.class.getClassLoader()
					.getResourceAsStream("bi5a/dimensions_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Dimensions.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Dimensions");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 305107 characters generated by Talend Open Studio for Data Integration on the
 * 28 octobre 2021 19:41:02 CEST
 ************************************************************************************************/